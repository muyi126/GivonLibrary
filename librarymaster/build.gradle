apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'


def globalConfiguration = rootProject.extensions.getByName("ext")

android {
    compileSdkVersion 24
    buildToolsVersion "23.0.3"

    //设置JDK1.8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    defaultConfig {
        minSdkVersion globalConfiguration.getAt("ANDROID_BUILD_MIN_SDK_VERSION") as int
        targetSdkVersion globalConfiguration.getAt("ANDROID_TARGET_SDK_VERSION") as int
        versionCode globalConfiguration.getAt("VERSION_CODE") as int
        versionName globalConfiguration.getAt("VERSION_NAME")

        buildConfigField "String", "CLIENT_ID", "\"${APP_CLIENT_ID}\""
        buildConfigField "String", "CLIENT_SECRET", "\"${APP_CLIENT_SECRET}\""
        buildConfigField "String", "ENDPOINT", "\"${API_ENDPOINT}\""
        buildConfigField "String", "QQ_APPID", "\"${QQ_APPID}\""
        buildConfigField "String", "QQ_APPKEY", "\"${QQ_APPKEY}\""
        buildConfigField "String", "WX_APPID", "\"${WX_APPID}\""
        buildConfigField "String", "WX_SECRET", "\"${WX_SECRET}\""

        resValue "string", "jpush_channel", JPUSH_CHANNEL
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.5'
    }
}
def SUPPORT_VERSION = "24.0.0"

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-annotations:' + SUPPORT_VERSION
    compile 'com.android.support:support-v13:' + SUPPORT_VERSION
    compile 'com.android.support:cardview-v7:' + SUPPORT_VERSION
    compile 'com.android.support:support-v4:' + SUPPORT_VERSION
    compile 'com.android.support:appcompat-v7:' + SUPPORT_VERSION
    compile 'com.android.support:recyclerview-v7:' + SUPPORT_VERSION
    compile 'com.android.support:design:' + SUPPORT_VERSION
    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support:support-annotations:' + SUPPORT_VERSION

    //这里的依赖readme有说到
    compile 'com.jakewharton:butterknife:7.0.1'

    //Nucleus
    compile 'info.android15.nucleus:nucleus:2.0.1'
    compile 'info.android15.nucleus:nucleus-support-v7:2.0.1'
    compile 'info.android15.nucleus:nucleus-support-v4:2.0.1'

    compile 'com.google.dagger:dagger:2.0.1'
    apt 'com.google.dagger:dagger-compiler:2.0.1'
    provided 'javax.annotation:jsr250-api:1.0'

    //Wrapper for Android SharedPreferences with object serialization and RxJava Observables
    compile 'com.github.pwittchen:prefser:2.0.5'

    //rxJava
    compile 'io.reactivex:rxandroid:1.2.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    compile 'io.reactivex:rxjava:1.1.6'


    // fresco
    compile 'com.facebook.fresco:fresco:0.11.0'
    //自定义fresco网络加载库,使用okhttp3
//    compile 'com.facebook.fresco:imagepipeline-okhttp:0.11.0'
    compile 'com.squareup.okhttp3:okhttp:3.3.1'
    //log
    compile 'com.orhanobut:logger:1.13'

    //A memory leak detection library for Android and Java.内存分析
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
//    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'

    //用于生命周期的保存与恢复状态(maven {url "https://clojars.org/repo/"}) github.com/frankiesardo/icepick
    compile 'frankiesardo:icepick:3.2.0'
    provided 'frankiesardo:icepick-processor:3.2.0'

    //otto
    compile 'com.squareup:otto:1.3.8'

    //retrofit
    compile 'com.squareup.retrofit2:retrofit:2.1.0'


}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}
