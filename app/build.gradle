apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.mutualmobile.gradle.plugins.dexinfo'

// Hat tip to Jake Wharton for this - found it in the u2020 app
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

def globalConfiguration = rootProject.extensions.getByName("ext")
android {
    compileSdkVersion globalConfiguration.getAt("ANDROID_COMPILE_SDK_VERSION") as int
    buildToolsVersion globalConfiguration.getAt("ANDROID_BUILD_TOOLS_VERSION")

    sourceSets.main {
        jniLibs.srcDirs = ['libs']
    }

    defaultConfig {
        applicationId "com.base.givon.givonlibrary"
        minSdkVersion globalConfiguration.getAt("ANDROID_BUILD_MIN_SDK_VERSION") as int
        targetSdkVersion globalConfiguration.getAt("ANDROID_TARGET_SDK_VERSION") as int
        versionCode globalConfiguration.getAt("VERSION_CODE") as int
        versionName globalConfiguration.getAt("VERSION_NAME")

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "CLIENT_ID", "\"${APP_CLIENT_ID}\""
        buildConfigField "String", "CLIENT_SECRET", "\"${APP_CLIENT_SECRET}\""
        buildConfigField "String", "ENDPOINT", "\"${API_ENDPOINT}\""
        buildConfigField "String", "QQ_APPID", "\"${QQ_APPID}\""
        buildConfigField "String", "QQ_APPKEY", "\"${QQ_APPKEY}\""
        buildConfigField "String", "WX_APPID", "\"${WX_APPID}\""
        buildConfigField "String", "WX_SECRET", "\"${WX_SECRET}\""

        resValue "string", "jpush_channel", JPUSH_CHANNEL
    }

    signingConfigs {
        debug {
            storeFile file('../BuildSystemConfig/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {

            def signingFile = file('../signing.properties')
            if (signingFile.canRead()) {
                def Properties props = new Properties()
                props.load(new FileInputStream(signingFile))

                try {
                    storeFile = file(props['STORE_FILE'])
                    storePassword = props['STORE_PASSWORD']
                    keyAlias = props['KEY_ALIAS']
                    keyPassword = props['KEY_PASSWORD']

                    println "RELEASE_BUILD: Signing..."
                } catch (e) {
                    throw new InvalidUserDataException("You should define STORE_FILE and STORE_PASSWORD and KEY_ALIAS and KEY_PASSWORD in signing.properties.")
                }
            } else {
                println "RELEASE_BUILD: signing.properties not found"
            }

        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-dev"
            signingConfig signingConfigs.debug
        }
        release {
            def releaseFile = file('../release.properties')
            if (releaseFile.canRead()) {
                def Properties props = new Properties()
                props.load(new FileInputStream(releaseFile))
                println "RELEASE_BUILD: load release.properties..."

                if (props.containsKey('APP_CLIENT_ID')) {
                    buildConfigField "String", "CLIENT_ID", "\"${props['APP_CLIENT_ID']}\""
                }

                if (props.containsKey('APP_CLIENT_SECRET')) {
                    buildConfigField "String", "CLIENT_SECRET", "\"${props['APP_CLIENT_SECRET']}\""
                }

                if (props.containsKey('API_ENDPOINT')) {
                    buildConfigField "String", "ENDPOINT", "\"${props['API_ENDPOINT']}\""
                }
            }
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // This is important, it will run lint checks but won't abort build
    lintOptions {
        abortOnError false
        disable 'InvalidPackage'
    }

    packagingOptions {
        // Butter Knife
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }

    configurations {
        all*.exclude module: 'classworlds'
        all*.exclude module: 'commons-logging'
        all*.exclude module: 'httpclient'
        all*.exclude module: 'maven-artifact'
        all*.exclude module: 'maven-artifact-manager'
        all*.exclude module: 'maven-error-diagnostics'
        all*.exclude module: 'maven-model'
        all*.exclude module: 'maven-project'
        all*.exclude module: 'maven-settings'
        all*.exclude module: 'plexus-container-default'
        all*.exclude module: 'plexus-interpolation'
        all*.exclude module: 'plexus-utils'
        all*.exclude module: 'wagon-file'
        all*.exclude module: 'wagon-http-lightweight'
        all*.exclude module: 'wagon-provider-api'
    }

    productFlavors {
        development {}
        Fir {}
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_APPKEY: UMENG_APPKEY, UMENG_CHANNEL: name, JPUSH_APPKEY: JPUSH_APPKEY]
    }

    variantFilter { variant ->
        def buildType = variant.buildType.name
        def flavorName = variant.getFlavors().get(0).name
        if (buildType.equals('debug')) {
            if (flavorName.equals('development')) {
                variant.setIgnore(false)
            } else {
                variant.setIgnore(true)
            }
        } else {
            if (flavorName.equals('development')) {
                variant.setIgnore(true)
            } else {
                variant.setIgnore(false)
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def versionName = defaultConfig.versionName.replace(".", "_")
                def fileName = outputFile.name.replace(".apk", "-v${versionName}.apk")
                fileName = fileName.replace("app", "givon-${globalConfiguration.getAt("VERSION_CODE") as int}")
                println "[FileName]: ${fileName}"
                if (variant.buildType.name.equals('release')) {
                    output.outputFile = file("${outputFile.parent}/release/${defaultConfig.versionName}/${fileName}")
                } else {
                    output.outputFile = file("${outputFile.parent}/${fileName}")
                }
            }
        }
    }
}
def SUPPORT_VERSION = "24.0.0"
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-annotations:' + SUPPORT_VERSION
    compile 'com.android.support:support-v13:' + SUPPORT_VERSION
    compile 'com.android.support:cardview-v7:' + SUPPORT_VERSION
    compile 'com.android.support:support-v4:' + SUPPORT_VERSION
    compile 'com.android.support:appcompat-v7:' + SUPPORT_VERSION
    compile 'com.android.support:recyclerview-v7:' + SUPPORT_VERSION
    compile 'com.android.support:design:' + SUPPORT_VERSION
    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support:support-annotations:' + SUPPORT_VERSION
    //这里的依赖readme有说到
    compile 'com.jakewharton:butterknife:8.2.1'
    apt 'com.jakewharton:butterknife-compiler:8.2.1'
    //Nucleus
    compile 'info.android15.nucleus:nucleus:2.0.1'
    compile 'info.android15.nucleus:nucleus-support-v7:2.0.1'
    compile 'info.android15.nucleus:nucleus-support-v4:2.0.1'
    //Google
    compile 'com.google.dagger:dagger:2.0.1'
    apt 'com.google.dagger:dagger-compiler:2.0.1'
    compile 'com.google.code.gson:gson:2.7'
    provided 'javax.annotation:jsr250-api:1.0'
    //Wrapper for Android SharedPreferences with object serialization and RxJava Observables
    compile 'com.github.pwittchen:prefser:2.0.5'
    //rxJava
    compile 'io.reactivex:rxandroid:1.2.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    compile 'io.reactivex:rxjava:1.1.6'
    // fresco
    compile 'com.facebook.fresco:fresco:0.11.0'
    //自定义fresco网络加载库,使用okhttp3
    //    compile 'com.facebook.fresco:imagepipeline-okhttp:0.11.0'
    compile 'com.squareup.okhttp3:okhttp:3.3.1'
    //minSdkVersion 15
    compile 'com.github.simonpercic:oklog3:0.2.1'
    //logger
    compile 'com.orhanobut:logger:1.13'
    //A memory leak detection library for Android and Java.内存分析
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    //    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    //用于生命周期的保存与恢复状态(maven {url "https://clojars.org/repo/"}) github.com/frankiesardo/icepick
    compile 'frankiesardo:icepick:3.2.0'
    provided 'frankiesardo:icepick-processor:3.2.0'
    //otto
    //    compile 'com.squareup:otto:1.3.8'
    //RxBus
    compile 'com.hwangjr.rxbus:rxbus:1.0.4'
    //retrofit
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    //    compile 'com.squareup.retrofit2:retrofit-adapters:2.1.0'
    //一个简化onActivityResult流的库
    compile 'com.levelmoney.velodrome:velodrome:1.0'
    //smarttablayout
    compile 'com.ogaclejapan.smarttablayout:library:1.6.1@aar'
    //Optional: see how to use the utility.
    compile 'com.ogaclejapan.smarttablayout:utils-v4:1.6.1@aar'
    //multistateview基于状态显示不同内容的安卓视图
    compile 'com.github.Kennyc1012:MultiStateView:1.2.0'
    //https://github.com/mrmans0n/smart-adapters
    // Android库项目，旨在简化适配器/ recyclerview使用GridView和ListView。你不必再为任何无聊的适配器编码了！
    //它有助于保持样板到最小并添加容易改变baseadapter / recyclerview之间的可能性。适配器适配器类型不改变任何代码。它还允许使用相同的列表或网格的多个模型/视图类型的无痛使用-只在模型对象和视图对象之间添加不同的映射。
    //以前的NL工具包的一部分。
    compile 'io.nlopez.smartadapters:library:1.3.1'
    //https://github.com/android-cjj/Android-MaterialRefreshLayout/blob/master/README-cn.md
    compile 'com.cjj.materialrefeshlayout:library:1.3.0'
    compile 'com.nineoldandroids:library:2.4.0'
    //消息提示圆圈标记库
    compile 'cn.bingoogolapple:bga-badgeview:1.1.2@aar'
    //百分比布局库 https://github.com/hongyangAndroid/android-percent-support-extend
    compile 'com.zhy:percent-support-extends:1.1.1'
    //prettytime
    compile 'org.ocpsoft.prettytime:prettytime:3.2.7.Final'
    //retroauth登录账户
    //    compile 'com.andretietz.retroauth:2.0.0@aar'
    //   compile 'com.github.andretietz:retroauth:2.0.0'
    //    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.github.rey5137:material:1.2.1.6-SNAPSHOT'
    compile project(':okhttputils')
    compile project(':wheel_g')
    //    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha1'
}
