apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'com.mutualmobile.gradle.plugins.dexinfo'

// Hat tip to Jake Wharton for this - found it in the u2020 app
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

def globalConfiguration = rootProject.extensions.getByName("ext")
android {
    compileSdkVersion globalConfiguration.getAt("ANDROID_COMPILE_SDK_VERSION") as int
    buildToolsVersion globalConfiguration.getAt("ANDROID_BUILD_TOOLS_VERSION")

    sourceSets.main {
        jniLibs.srcDirs = ['libs']
    }

    defaultConfig {
        applicationId "com.base.givon.demo"
        minSdkVersion globalConfiguration.getAt("ANDROID_BUILD_MIN_SDK_VERSION") as int
        targetSdkVersion globalConfiguration.getAt("ANDROID_TARGET_SDK_VERSION") as int
        versionCode globalConfiguration.getAt("VERSION_CODE") as int
        versionName globalConfiguration.getAt("VERSION_NAME")

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "CLIENT_ID", "\"${APP_CLIENT_ID}\""
        buildConfigField "String", "CLIENT_SECRET", "\"${APP_CLIENT_SECRET}\""
        buildConfigField "String", "ENDPOINT", "\"${API_ENDPOINT}\""
        buildConfigField "String", "QQ_APPID", "\"${QQ_APPID}\""
        buildConfigField "String", "QQ_APPKEY", "\"${QQ_APPKEY}\""
        buildConfigField "String", "WX_APPID", "\"${WX_APPID}\""
        buildConfigField "String", "WX_SECRET", "\"${WX_SECRET}\""

        resValue "string", "jpush_channel", JPUSH_CHANNEL
    }

    signingConfigs {
        debug {
            storeFile file('../BuildSystemConfig/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {

            def signingFile = file('../signing.properties')
            if (signingFile.canRead()) {
                def Properties props = new Properties()
                props.load(new FileInputStream(signingFile))

                try {
                    storeFile = file(props['STORE_FILE'])
                    storePassword = props['STORE_PASSWORD']
                    keyAlias = props['KEY_ALIAS']
                    keyPassword = props['KEY_PASSWORD']

                    println "RELEASE_BUILD: Signing..."
                } catch (e) {
                    throw new InvalidUserDataException("You should define STORE_FILE and STORE_PASSWORD and KEY_ALIAS and KEY_PASSWORD in signing.properties.")
                }
            } else {
                println "RELEASE_BUILD: signing.properties not found"
            }

        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-dev"
            signingConfig signingConfigs.debug
        }
        release {
            def releaseFile = file('../release.properties')
            if (releaseFile.canRead()) {
                def Properties props = new Properties()
                props.load(new FileInputStream(releaseFile))
                println "RELEASE_BUILD: load release.properties..."

                if (props.containsKey('APP_CLIENT_ID')) {
                    buildConfigField "String", "CLIENT_ID", "\"${props['APP_CLIENT_ID']}\""
                }

                if (props.containsKey('APP_CLIENT_SECRET')) {
                    buildConfigField "String", "CLIENT_SECRET", "\"${props['APP_CLIENT_SECRET']}\""
                }

                if (props.containsKey('API_ENDPOINT')) {
                    buildConfigField "String", "ENDPOINT", "\"${props['API_ENDPOINT']}\""
                }
            }
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // This is important, it will run lint checks but won't abort build
    lintOptions {
        abortOnError false
        disable 'InvalidPackage'
    }

    packagingOptions {
        // Butter Knife
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }

    configurations {
        all*.exclude module: 'classworlds'
        all*.exclude module: 'commons-logging'
        all*.exclude module: 'httpclient'
        all*.exclude module: 'maven-artifact'
        all*.exclude module: 'maven-artifact-manager'
        all*.exclude module: 'maven-error-diagnostics'
        all*.exclude module: 'maven-model'
        all*.exclude module: 'maven-project'
        all*.exclude module: 'maven-settings'
        all*.exclude module: 'plexus-container-default'
        all*.exclude module: 'plexus-interpolation'
        all*.exclude module: 'plexus-utils'
        all*.exclude module: 'wagon-file'
        all*.exclude module: 'wagon-http-lightweight'
        all*.exclude module: 'wagon-provider-api'
    }

    productFlavors {
        development {}
        Fir {}
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_APPKEY: UMENG_APPKEY, UMENG_CHANNEL: name, JPUSH_APPKEY: JPUSH_APPKEY]
    }

    variantFilter { variant ->
        def buildType = variant.buildType.name
        def flavorName = variant.getFlavors().get(0).name
        if (buildType.equals('debug')) {
            if (flavorName.equals('development')) {
                variant.setIgnore(false)
            } else {
                variant.setIgnore(true)
            }
        } else {
            if (flavorName.equals('development')) {
                variant.setIgnore(true)
            } else {
                variant.setIgnore(false)
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def versionName = defaultConfig.versionName.replace(".", "_")
                def fileName = outputFile.name.replace(".apk", "-v${versionName}.apk")
                fileName = fileName.replace("app", "givon-${globalConfiguration.getAt("VERSION_CODE") as int}")
                println "[FileName]: ${fileName}"
                if (variant.buildType.name.equals('release')) {
                    output.outputFile = file("${outputFile.parent}/release/${defaultConfig.versionName}/${fileName}")
                } else {
                    output.outputFile = file("${outputFile.parent}/${fileName}")
                }
            }
        }
    }
}
def SUPPORT_VERSION = "24.1.1"
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
//    compile 'com.android.support:support-annotations:' + SUPPORT_VERSION
//    compile 'com.android.support:support-v13:' + SUPPORT_VERSION
//    compile 'com.android.support:cardview-v7:' + SUPPORT_VERSION
//    compile 'com.android.support:support-v4:' + SUPPORT_VERSION
//    compile 'com.android.support:appcompat-v7:' + SUPPORT_VERSION
//    compile 'com.android.support:recyclerview-v7:' + SUPPORT_VERSION
//    compile 'com.android.support:design:' + SUPPORT_VERSION
//    testCompile 'junit:junit:4.12'
//    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
//    androidTestCompile 'com.android.support.test:runner:0.5'
//    androidTestCompile 'com.android.support:support-annotations:' + SUPPORT_VERSION
//
//
//    compile 'io.reactivex:rxandroid:1.2.1'
//    compile 'io.reactivex:rxjava:1.1.6'
//    compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
//    compile 'com.jakewharton.rxbinding:rxbinding-support-v4:0.4.0'
//    compile 'com.jakewharton.rxbinding:rxbinding-appcompat-v7:0.4.0'
//
//
    compile 'com.google.dagger:dagger:2.0.1'
    apt 'com.google.dagger:dagger-compiler:2.0.1'
    apt 'com.jakewharton:butterknife-compiler:8.2.1'
    provided 'javax.annotation:jsr250-api:1.0'
    provided 'frankiesardo:icepick-processor:3.2.0'

    compile project(':okhttputils')
    compile project(':wheel_g')
    //    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha1'
    compile project(':base_obj')
}
